// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Takeaway.Api.Data;

#nullable disable

namespace Takeaway.Api.Data.Migrations
{
    [DbContext(typeof(TakeawayDbContext))]
    partial class TakeawayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Traditional Italian pizzas",
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Soft drinks and beverages",
                            Name = "Beverage"
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShopId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderChannelId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShopId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.OrderChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderChannels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Voice assistant",
                            Name = "Voice"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Phone call",
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mobile application",
                            Name = "App"
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Modifiers")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariantName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Order received",
                            Name = "Received"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Order is being prepared",
                            Name = "InPreparation"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Order completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Order cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cash payment",
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Credit card payment",
                            Name = "CreditCard"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Digital wallet",
                            Name = "Digital"
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShopId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Classic pizza with tomato, mozzarella and basil",
                            IsAvailable = true,
                            Name = "Margherita",
                            Price = 7.50m,
                            ShopId = 1,
                            StockQuantity = 100,
                            VatRate = 0.10m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Spicy salami pizza with mozzarella",
                            IsAvailable = true,
                            Name = "Diavola",
                            Price = 8.50m,
                            ShopId = 1,
                            StockQuantity = 80,
                            VatRate = 0.10m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Chilled 33cl can",
                            IsAvailable = true,
                            Name = "Coca-Cola",
                            Price = 1.80m,
                            ShopId = 1,
                            StockQuantity = 200,
                            VatRate = 0.22m
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.ProductModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductModifiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Extra Cheese",
                            Price = 1.20m,
                            ProductId = 1,
                            VatRate = 0.10m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Olives",
                            Price = 0.80m,
                            ProductId = 1,
                            VatRate = 0.10m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Extra Spicy",
                            Price = 0.90m,
                            ProductId = 2,
                            VatRate = 0.10m
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDefault = true,
                            Name = "Regular",
                            Price = 7.50m,
                            ProductId = 1,
                            StockQuantity = 80,
                            VatRate = 0.10m
                        },
                        new
                        {
                            Id = 2,
                            IsDefault = false,
                            Name = "Large",
                            Price = 9.50m,
                            ProductId = 1,
                            StockQuantity = 40,
                            VatRate = 0.10m
                        },
                        new
                        {
                            Id = 3,
                            IsDefault = true,
                            Name = "Regular",
                            Price = 8.50m,
                            ProductId = 2,
                            StockQuantity = 60,
                            VatRate = 0.10m
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Voice Lane",
                            Description = "Demo shop for the voice assistant",
                            Email = "contact@vocaltakeaway.example",
                            Name = "Vocal Takeaway",
                            OpeningHours = "Mon-Sun 11:00-23:00",
                            Phone = "+39 055 1234567"
                        });
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Order", "Order")
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Order", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Takeaway.Api.Domain.Entities.OrderChannel", "OrderChannel")
                        .WithMany("Orders")
                        .HasForeignKey("OrderChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Takeaway.Api.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Takeaway.Api.Domain.Entities.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderChannel");

                    b.Navigation("OrderStatus");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Takeaway.Api.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Takeaway.Api.Domain.Entities.ProductVariant", null)
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Takeaway.Api.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Product", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Takeaway.Api.Domain.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.ProductModifier", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Product", "Product")
                        .WithMany("Modifiers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("Takeaway.Api.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Order", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Items");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.OrderChannel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Product", b =>
                {
                    b.Navigation("Modifiers");

                    b.Navigation("OrderItems");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Takeaway.Api.Domain.Entities.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
